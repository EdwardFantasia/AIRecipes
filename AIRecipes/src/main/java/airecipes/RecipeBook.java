/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package airecipes;

import com.google.gson.Gson;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.net.ssl.HttpsURLConnection;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.JOptionPane;

/**
 *
 * @author Edwar
 */

public class RecipeBook extends javax.swing.JFrame{
    private AIRecipes creator;
    
    private ArrayList<Result> resultList;
    private ArrayList<Result> cookBookRecipes;
    
    private DefaultListModel recipeTitles;
    private DefaultListModel recipeAspectTitles;
    private DefaultListModel stepsModel;
    private DefaultListModel cookbookModel;
    
    private Gson gson;
    
    private String apiKey;
    
    private Recipe[] recipeAspectList;
    
    private ArrayList<StepInform> stepInforms;

    /**
     * Creates new form RecipeBook
     */
    public RecipeBook(AIRecipes creator, ArrayList<Result> resultList, DefaultListModel recipeTitles, String apiKey) {
        initComponents();
        
        this.creator = creator;
        
        this.cookBookRecipes = new ArrayList<Result>();
        this.resultList = resultList;
        this.recipeTitles = recipeTitles;
        
        this.recipeJList.setModel(recipeTitles);
        
        this.gson = new Gson();
        
        this.apiKey = apiKey;
        
        this.recipeAspectTitles = new DefaultListModel();
        
        this.stepsModel = new DefaultListModel();
        
        this.cookbookModel = new DefaultListModel();
        
        this.recipeAspectsJList.setVisible(false);
        
        this.stepInforms = new ArrayList<StepInform>();
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        recipeJList = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        cookbookJList = new javax.swing.JList<>();
        saveButton = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        addToCookBookButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        stepsJList = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        recipeAspectsJList = new javax.swing.JList<>();
        pictureLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        removeCBook = new javax.swing.JButton();
        makeNewSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(1144, 531));

        recipeJList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        recipeJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                recipeJListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(recipeJList);

        jLabel1.setText("Cook Book");

        cookbookJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                cookbookJListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(cookbookJList);

        saveButton.setText("Save Cookbook");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        loadButton.setText("Load Cookbook");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        addToCookBookButton.setText("Add to Cook Book");
        addToCookBookButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCookBookButtonActionPerformed(evt);
            }
        });

        stepsJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                stepsJListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(stepsJList);

        recipeAspectsJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                recipeAspectsJListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(recipeAspectsJList);

        jLabel2.setText("Recipe Components");

        jLabel3.setText("Recipe Steps");

        jLabel4.setText("Recipes");

        removeCBook.setText("Remove from Cookbook");
        removeCBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCBookActionPerformed(evt);
            }
        });

        makeNewSearch.setText("Make New Search");
        makeNewSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                makeNewSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(182, 182, 182)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(199, 199, 199)
                                .addComponent(jLabel4)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(saveButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(removeCBook)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(loadButton)))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(makeNewSearch)
                                .addGap(77, 77, 77)
                                .addComponent(addToCookBookButton, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(231, 231, 231))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(109, 109, 109)
                                .addComponent(pictureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(206, 206, 206))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addToCookBookButton)
                            .addComponent(makeNewSearch))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(saveButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(loadButton)
                                .addComponent(removeCBook))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pictureLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Saves the cookbook
     * @param evt - event on this JFrame object
     */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try{
            
            FileWriter fw = new FileWriter("src/main/res/model.json");
            fw.write("{\"results\":");
            gson.toJson(cookBookRecipes, fw);
            /*
            https://stackoverflow.com/questions/45995067/writer-not-working-for-json-file-using-gson-json-file-is-blank-after-code-execu
            */
            fw.write("}");
            fw.close();
            
            JOptionPane.showMessageDialog(null, "Cookbook Saved!", "Collection Saved", JOptionPane.INFORMATION_MESSAGE); 
        } catch (IOException e){
            JOptionPane.showMessageDialog(null, "Cookbook Not Saved.", "Collection Not Saved", JOptionPane.ERROR_MESSAGE); 
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    /**
     * changes display on right side
     * @param list - list to use to get items to change display to match
     * @param evt - event occurring on this JFrame element
     * @param specificResults - results that are used to change display
     */
    private void changeDisplay(JList list, javax.swing.event.ListSelectionEvent evt, ArrayList<Result> specificResults){
        int selectedId = specificResults.get(list.getSelectedIndex()).getResultId();
            
        Image image = null;
        
        Thread thread1 = new Thread(new Thread1(selectedId, image));
        
        thread1.start();
        
        
        recipeAspectTitles.clear();
        stepsModel.clear();
        
        try{
            URL url = new URL("https://api.spoonacular.com/recipes/" + selectedId + "/analyzedInstructions?" + apiKey);
            HttpsURLConnection connection = (HttpsURLConnection)url.openConnection();
            connection.setRequestMethod("GET");
            connection.setRequestProperty("Content-Type", "application/json");
            
            connection.connect();
    
            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            
            recipeAspectList = gson.fromJson(reader, Recipe[].class);
                
            for(int i = 0; i < recipeAspectList.length; i++){
                if(recipeAspectList[i].getName().length() == 0){ //if recipe aspect's title is ""
                    recipeAspectTitles.add(i, list.getSelectedValue());
                }
                else{
                    recipeAspectTitles.add(i, recipeAspectList[i].getName());
                }
            }
                
            if(recipeAspectTitles.getSize() > 1){ //if the DLM that holds recipe aspect of selected recipe has more than one aspect
                recipeAspectsJList.setModel(recipeAspectTitles);
                recipeAspectsJList.setVisible(true);
            }
            else{
                if(recipeAspectsJList.isVisible() == true){
                    this.recipeAspectsJList.setVisible(false);
                }
                    
                for(int i = 0; i < recipeAspectList[0].getSteps().size(); i++){
                    stepsModel.add(i, recipeAspectList[0].getSteps().get(i).getStep());
                }
                    
                makeDialogs(recipeAspectList[0].getSteps());
                    
                stepsJList.setModel(stepsModel);
            }
                
            } catch(MalformedURLException ex){JOptionPane.showMessageDialog(null, "There was an error trying to retrieve the information", "Retrieval Error", JOptionPane.ERROR_MESSAGE);}
            catch(IOException io){JOptionPane.showMessageDialog(null, "There was an error retrieving the information", "Retrieval Error", JOptionPane.ERROR_MESSAGE);}
            
    }
    
    /**
     * changes display when recipeJList value changes based on currently selected recipeJList item
     * @param evt - event occurring on JFrame object
     */
    private void recipeJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_recipeJListValueChanged
        changeDisplay(recipeJList, evt, resultList);
    }//GEN-LAST:event_recipeJListValueChanged

    /**
     * changes the stepsJList based on currently selected aspect
     * @param evt - event occurring on JFrame object
     */
    private void recipeAspectsJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_recipeAspectsJListValueChanged
        if(evt.getValueIsAdjusting() == true && recipeAspectsJList.isVisible()){
            stepsModel.clear();
            for(int i = 0; i < recipeAspectList[recipeAspectsJList.getSelectedIndex()].getSteps().size(); i++){
                stepsModel.add(i, recipeAspectList[recipeAspectsJList.getSelectedIndex()].getSteps().get(i).getStep());
            }
            
            makeDialogs(recipeAspectList[recipeAspectsJList.getSelectedIndex()].getSteps());
            
            stepsJList.setModel(stepsModel);        
        }
    }//GEN-LAST:event_recipeAspectsJListValueChanged

    /**
     * adds current selected recipeJList item to cookbook list
     * @param evt - event occurring on JFrame object
     */
    private void addToCookBookButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCookBookButtonActionPerformed
        if(cookbookModel.contains(recipeJList.getSelectedValue()) == false){
            this.cookBookRecipes.add(resultList.get(recipeJList.getSelectedIndex()));
            this.cookbookModel.add(cookbookModel.size(), recipeJList.getSelectedValue());
            this.cookbookJList.setModel(cookbookModel);
        }
    }//GEN-LAST:event_addToCookBookButtonActionPerformed

    /**
     * loads in cookbook json file and sets the cookbook to those items
     * @param evt - event occurring on JFrame object
     */
    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        try{
        
            Reader reader = Files.newBufferedReader(Paths.get("src/main/res/model.json"));

            Food loadFood = gson.fromJson(reader, Food.class); //said to be root of error, expected BEGIN_Object but was string at line

            cookBookRecipes = loadFood.getAPIResults();
            
            cookbookModel.clear();

            for(Result result : cookBookRecipes){
                cookbookModel.addElement(result.getResultTitle());
            }

            cookbookJList.setModel(cookbookModel);
            
            JOptionPane.showMessageDialog(null, "Cookbook Loaded!", "Collection Loaded", JOptionPane.INFORMATION_MESSAGE); 
        } catch (IOException e){
            JOptionPane.showMessageDialog(null, "Coookboon Not Loaded.", "Collection Not Loaded", JOptionPane.ERROR_MESSAGE); 
        }
    }//GEN-LAST:event_loadButtonActionPerformed

    /**
     * changes display based on what cookbook item is currently selected
     * @param evt - event that occurs on List
     */
    private void cookbookJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_cookbookJListValueChanged
        if (evt.getValueIsAdjusting() == true){
            changeDisplay(cookbookJList, evt, cookBookRecipes); //something wrong with changeDisplay causing an error when removing
        }
    }//GEN-LAST:event_cookbookJListValueChanged

    /**
     * removes selected cookbook element from cookbook
     * @param evt - event that occurs on JFrame element
     */
    private void removeCBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCBookActionPerformed
        cookBookRecipes.remove(cookbookJList.getSelectedIndex());
        
        cookbookModel.remove(cookbookJList.getSelectedIndex());
        
        cookbookJList.setModel(cookbookModel);
    }//GEN-LAST:event_removeCBookActionPerformed

    /**
     * creates each StepInform for each step
     * @param evt - event that happens when list selected
     */
    private void stepsJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_stepsJListValueChanged
        if(stepsJList.getSelectedIndex() != -1){
            stepInforms.get(stepsJList.getSelectedIndex()).setVisible(true);
        }
    }//GEN-LAST:event_stepsJListValueChanged

    /**
     * returns to AIRecipes instance
     * @param evt - event that happens of JFrame element
     */
    private void makeNewSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_makeNewSearchActionPerformed
        creator.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_makeNewSearchActionPerformed
    
    /**
     * sets display picture of recipe to placeholder image
     */
    public void setPlaceholder(){
        ImageIcon placeholder = new ImageIcon("src/main/res/placeholder.jpg");
        Image image = placeholder.getImage();
        placeholder = new ImageIcon(image.getScaledInstance(pictureLabel.getWidth(), pictureLabel.getHeight(), Image.SCALE_SMOOTH));
        pictureLabel.setIcon(placeholder);
    }
    
    /**
     * creates StepInform instances for each Step in stepList
     * @param stepList - list of Steps that will have StepInforms created for them
     */
    private void makeDialogs(ArrayList<Step> stepList){
        if(this.stepInforms.isEmpty() == false){
            this.stepInforms.clear();
        }
        
        for(int i = 0; i < stepList.size(); i++){
            this.stepInforms.add(new StepInform(this, true, stepList.get(i).getIngredients(), stepList.get(i).getEquipment(), stepList.get(i).getNumber()));
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RecipeBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RecipeBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RecipeBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RecipeBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToCookBookButton;
    private javax.swing.JList<String> cookbookJList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton loadButton;
    private javax.swing.JButton makeNewSearch;
    private javax.swing.JLabel pictureLabel;
    private javax.swing.JList<String> recipeAspectsJList;
    private javax.swing.JList<String> recipeJList;
    private javax.swing.JButton removeCBook;
    private javax.swing.JButton saveButton;
    private javax.swing.JList<String> stepsJList;
    // End of variables declaration//GEN-END:variables

    private class Thread1 implements Runnable{
        int selectedId;
        
        Image image;
        
        public Thread1(int selectedId, Image image){
            this.selectedId = selectedId;
            this.image = image;
        }
        
        @Override
        public void run() {
            try {
                URL imgUrl = new URL("https://spoonacular.com/recipeImages/" + selectedId + "-636x393.jpg");
                image = ImageIO.read(imgUrl);
                image = image.getScaledInstance(pictureLabel.getWidth(), pictureLabel.getHeight(), Image.SCALE_SMOOTH);
                ImageIcon labelIcon = new ImageIcon(image);
                pictureLabel.setIcon(labelIcon);
            } catch (IOException e){
                setPlaceholder();
            } catch (IndexOutOfBoundsException e){
                setPlaceholder();
            } catch(NullPointerException npe){
                setPlaceholder();
            }
        }
        
    }

}
